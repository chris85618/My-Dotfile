:set whichwrap+=<,>,h,l,[,]
:set confirm
:set number
:set ruler
:set cursorline
:set t_Co=256
:set laststatus=2
:set ignorecase
:set smartcase
:set hlsearch
:set smarttab
:set tabstop=4
:set softtabstop=4
:set shiftwidth=4
:set mouse=""
:set backspace=2
:set history=1000
:set incsearch
:set cursorline
:set cursorcolumn
:set nocompatible
:set incsearch
:set backspace=indent,eol,start
:set statusline=[%{expand('%:p')}][%{strlen(&fenc)?&fenc:&enc},\ %{&ff},\ %{strlen(&filetype)?&filetype:'plain'}]%{FileSize()}%{IsBinary()}%=%c,%l/%L\ [%3p%%]
:set showmode
:set showcmd
:set wrap
:set noautowrite
:set encoding=utf-8
:set fileencodings=utf-8,utf-16,big5,gb2312,gbk,gb18030,euc-jp,euc-kr,latin1
:let g:ycm_autoclose_preview_window_after_completion = 1
:let g:ycm_autoclose_preview_window_after_insertion = 1
:inoremap ( ()<Esc>i
:inoremap " ""<Esc>i
:inoremap ' ''<Esc>i
:inoremap [ []<Esc>i
:inoremap {<CR> {<CR>}<Esc>ko
:inoremap {{ {}<ESC>i
:noremap <C-S> <Esc>:w<CR>
:inoremap <C-S> <Esc>:w<CR><Right>i
:noremap <C-W><C-W><C-W> <Esc>:q!<CR>
:noremap! <C-W><C-W><C-W> <Esc>:q!<CR>
:noremap <C-Q> <Esc>:q<CR>
:noremap! <C-Q> <Esc>:q<CR>
:inoremap <C-D> <Esc>ddi
" <C-BS>  invalid, the following <C-H> just means <C-BS>
:inoremap <C-H> <C-W>
:inoremap <C-Del> <space><Esc>ce
:noremap <C-F> <Esc>/
:noremap! <C-F> <Esc>/
:noremap <C-T> <Esc>:
:noremap! <C-T> <Esc>:
:inoremap <C-U> <Esc>:u<CR>i
:inoremap <C-R> <Esc>:redo<CR>i
:noremap <C-Left> <C-S-Left>
:noremap! <C-Left> <C-S-Left>
:noremap <C-Right> <C-S-Right>
:noremap! <C-Right> <C-S-Right>
:noremap <C-Down> <Down><Down><Down><Down><Down>
:noremap! <C-Down> <Down><Down><Down><Down><Down>
:noremap <C-Up> <Up><Up><Up><Up><Up>
:noremap! <C-Up> <Up><Up><Up><Up><Up>
:inoremap <C-C> <expr> <Esc>v . input()
:inoremap <C-V> <Right><Esc>P<Right>i
:syntax enable
:startinsert
:colorscheme ron
:hi LineNr cterm=bold ctermfg=LightGrey ctermbg=NONE
:hi CursorColumn cterm=none ctermfg=NONE ctermbg=DarkGrey
:hi Search cterm=reverse ctermbg=NONE ctermfg=LightMagenta

if has("multi_byte")
    
else
    echoerr "If +multi_byte is not included, you should compile Vim with big features."
endif

function IsBinary()
    if (&binary == 0)
        return ""
    else
        return "[Binary]"
    endif
endfunction

function FileSize()
    let bytes = getfsize(expand("%:p"))
    if bytes <= 0
        return "[Empty]"
    endif
    if bytes < 1024
        return "[" . bytes . "B]"
    elseif bytes < 1048576
        return "[" . (bytes / 1024) . "KB]"
    else
        return "[" . (bytes / 1048576) . "MB]"
    endif
endfunction
